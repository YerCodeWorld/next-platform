generator Client {
provider = "prisma-client-js"
}

datasource db {
provider = "postgresql"
url      = env("VITE_DATABASE_URL")
}

model User {
id      String   @id @default(uuid())
role    UserRole @default(STUDENT)
email   String   @unique
name    String   @unique
picture String?

createdAt         DateTime   @default(now())
preferredColor    PageColors
preferredLanguage Language

exp Int @default(0) // New

testimonies Testimony[] @relation("UserTestimonies")

packageCompletions UserPackageCompletion[]
// gameSessions       UserGameSession[]  : For future reference

// I believe these should be in the TeacherProfile... only justification would be user with elevated permissions.
posts     Post[]     @relation("UserPosts")
dynamics  Dynamic[]  @relation("UserDynamics")
exercises Exercise[] @relation("UserExercises")

teacherProfile TeacherProfile?

@@map("users")
}

model Testimony {
id        String   @id @default(uuid())
content   String
createdAt DateTime @default(now())
rating    Int      @default(4)
featured  Boolean  @default(false)
userEmail String
user      User     @relation("UserTestimonies", fields: [userEmail], references: [email], onDelete: Cascade)

@@map("testimonies")
}

model Post {
id    String @id @default(uuid())
title String

slug    String @unique
summary String
content String @db.Text

coverImage String?

featured  Boolean  @default(false)
published Boolean  @default(false)
createdAt DateTime @default(now())
updatedAt DateTime @updatedAt

authorEmail String
user        User   @relation("UserPosts", fields: [authorEmail], references: [email], onDelete: Cascade)

@@index([authorEmail])
@@index([featured])
@@index([published])
@@map("posts")
}

model Dynamic {
id    String @id @default(uuid())
title String

slug String @unique

objective       String
description     String
content         String  @db.Text
materialsNeeded String?

duration    Int
minStudents Int             @default(2)
maxStudents Int?            @default(40) // Optional max students
ageGroup    AgeGroup
difficulty  DifficultyLevel @default(INTERMEDIATE)
dynamicType DynamicType

published Boolean @default(false)
featured  Boolean @default(false)

createdAt DateTime @default(now())
updatedAt DateTime @updatedAt

authorEmail String
user        User   @relation("UserDynamics", fields: [authorEmail], references: [email], onDelete: Cascade)

@@index([authorEmail])
@@index([published])
@@index([featured])
@@index([dynamicType])
@@index([ageGroup])
@@index([difficulty])
@@map("dynamics")
}

model Exercise {
  id    String @id @default(uuid())
  title String

  instructions String?
  type         ExerciseType
  variation    String?

  difficulty ExerciseDifficulty @default(INTERMEDIATE)
  category   ExerciseCategory   @default(GENERAL)
  content    Json

  rawEduScript   String?    @db.Text

  hints       String[]
  explanation String?

  tags           String[]
  timesCompleted Int      @default(0)

  isPublished Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  packageId String?
  package   ExercisePackage? @relation("PackageExercises", fields: [packageId], references: [id], onDelete: SetNull)

  authorEmail String
  user        User   @relation("UserExercises", fields: [authorEmail], references: [email], onDelete: Cascade)

@@index([authorEmail])
@@index([type])
@@index([difficulty])
@@index([category])
@@index([packageId])
@@index([isPublished])
@@map("exercises")
}

// =============================================================================
// TEACHER PROFILE
// =============================================================================

model TeacherProfile {
id     String @id @default(uuid())
userId String @unique
user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

// Basic Profile Info
displayName  String?
tagline      String?
bio          String? @db.Text
profileImage String?
coverImage   String?
introVideo   String?
introAudio   String?

// Theme & Customization
themeColor     String  @default("#A47BB9")
layoutStyle    String  @default("modern") // modern, minimal, creative
showCoverImage Boolean @default(true)
showIntroMedia Boolean @default(true)
profileEmoji   String?
personalQuote  String?

// Contact & Social
phoneNumber String?
whatsapp    String?
telegram    String?
instagram   String?
linkedin    String?
website     String?
timezone    String  @default("UTC")

// Teaching Info
yearsExperience   Int?
nativeLanguage    String?
teachingLanguages String[] // Array of languages they teach
specializations   String[] // Array of specializations
teachingStyle     String?  @db.Text
classroomRules    String?  @db.Text

// Availability (simple format)
availabilityTags String[] // ["weekdays", "evenings", "weekends", "mornings"]
hourlyRate       Decimal? @db.Decimal(10, 2)
currency         String   @default("USD")

// Profile Settings
isPublic           Boolean @default(true)
allowContactForm   Boolean @default(true)
showRates          Boolean @default(false)
showExperience     Boolean @default(true)
showEducation      Boolean @default(true)
showCertifications Boolean @default(true)

// Meta
profileViews Int      @default(0)
lastActive   DateTime @default(now())
createdAt    DateTime @default(now())
updatedAt    DateTime @updatedAt

// Relations
education       TeacherEducation[]
experience      TeacherExperience[]
certifications  TeacherCertification[]
profileSections TeacherProfileSection[]

@@map("teacher_profiles")
}

model TeacherEducation {
id               String         @id @default(uuid())
teacherProfileId String
teacherProfile   TeacherProfile @relation(fields: [teacherProfileId], references: [id], onDelete: Cascade)

degree      String
institution String
field       String?
startYear   Int
endYear     Int?
isOngoing   Boolean @default(false)
description String?

createdAt DateTime @default(now())

@@map("teacher_education")
}

model TeacherExperience {
id               String         @id @default(uuid())
teacherProfileId String
teacherProfile   TeacherProfile @relation(fields: [teacherProfileId], references: [id], onDelete: Cascade)

title       String
company     String
location    String?
startDate   DateTime
endDate     DateTime?
isCurrent   Boolean   @default(false)
description String?   @db.Text

createdAt DateTime @default(now())

@@map("teacher_experience")
}

model TeacherCertification {
id               String         @id @default(uuid())
teacherProfileId String
teacherProfile   TeacherProfile @relation(fields: [teacherProfileId], references: [id], onDelete: Cascade)

name          String
issuer        String
issueDate     DateTime
expiryDate    DateTime?
credentialId  String?
credentialUrl String?
description   String?

createdAt DateTime @default(now())

@@map("teacher_certifications")
}

model TeacherProfileSection {
id               String         @id @default(uuid())
teacherProfileId String
teacherProfile   TeacherProfile @relation(fields: [teacherProfileId], references: [id], onDelete: Cascade)

sectionType String // 'bio', 'availability', 'cv', 'style', 'contact', 'resources'
title       String?
content     String? @db.Text
isVisible   Boolean @default(true)
sortOrder   Int     @default(0)
customData  Json? // For storing section-specific data

createdAt DateTime @default(now())
updatedAt DateTime @updatedAt

@@map("teacher_profile_sections")
}

// =============================================================================
// EXERCISE PACKAGES SYSTEM
// =============================================================================

model ExercisePackage {
id          String           @id @default(uuid())
title       String
slug        String           @unique
description String
image       String? // Package cover image
category    ExerciseCategory @default(GENERAL)
article     String?          @db.Text

// SEO & Sharing
metaTitle       String?
metaDescription String?

// Package limits and structure
maxExercises Int @default(30) // Up to 30 exercises (5 per difficulty)

// Publishing
isPublished Boolean @default(false)
featured    Boolean @default(false)

createdAt DateTime @default(now())
updatedAt DateTime @updatedAt

exercises            Exercise[]              @relation("PackageExercises")
completions          UserPackageCompletion[]
PackageDifficultyBox PackageDifficultyBox[]

@@index([category])
@@index([isPublished])
@@index([featured])
@@index([slug])
@@map("exercise_packages")
}

model PackageDifficultyBox {
id         String          @id @default(uuid())
package    ExercisePackage @relation(fields: [packageId], references: [id])
packageId  String
difficulty DifficultyLevel
title      String
article    String          @db.Text

@@unique([packageId, difficulty])
}

// Track user progress on packages
model UserPackageCompletion {
id        String @id @default(uuid())
userId    String
packageId String

user    User            @relation(fields: [userId], references: [id], onDelete: Cascade)
package ExercisePackage @relation(fields: [packageId], references: [id], onDelete: Cascade)

// Completion tracking
completedExercises String[] // Array of exercise IDs (space-efficient slugs)
completionRate     Float    @default(0) // Percentage completed
lastActivityAt     DateTime @default(now())

createdAt DateTime @default(now())
updatedAt DateTime @updatedAt

@@unique([userId, packageId])
@@index([userId])
@@index([packageId])
@@map("user_package_completions")
}

// =============================================================================
// ENUMS
// =============================================================================

enum PageColors {
LAVENDER
CORAL
TEAL
WARMPINK
BLUE
PURPLE
}

enum UserRole {
ADMIN
TEACHER
STUDENT
}

enum Language {
SPANISH
ENGLISH
}

enum DynamicType {
READING
CONVERSATION
TEACHING_STRATEGY
GRAMMAR
VOCABULARY
GAME
COMPETITION
GENERAL
}

enum DifficultyLevel {
BEGINNER
INTERMEDIATE
ADVANCED
}

enum AgeGroup {
KIDS
TEENS
ADULTS
ALL_AGES
}

enum ExerciseType {
FILL_BLANK
MATCHING
MULTIPLE_CHOICE
ORDERING

CATEGORIZER
SELECTOR

READING
CONVERSATION
PUZZLE
}

enum ExerciseDifficulty {
BEGINNER
UPPER_BEGINNER
INTERMEDIATE
UPPER_INTERMEDIATE
ADVANCED
SUPER_ADVANCED
}

enum ExerciseCategory {
GRAMMAR
VOCABULARY
READING
WRITING
LISTENING
SPEAKING
CONVERSATION
GENERAL
}

// =============================================================================
// PAGE CONFIG
// =============================================================================
// =============================================================================
// IMPROVED PAGE CONFIGURATION MODEL
// =============================================================================
// Note: Keeping as single model for simplicity while adding improvements

model PageConfig {
id String @id @default(uuid())

// Basic Site Information
siteName    String  @default("EduGuiders")
description String  @db.Text
tagline     String? // Optional marketing tagline

// Contact Information
address String
phone   String
email   String

// Additional Contact Methods
whatsapp     String?
telegram     String?
supportEmail String?

// Social Media Links
facebook  String?
instagram String?
linkedin  String?
youtube   String?
tiktok    String?

// Social Media Content Embeds
instagramPosts String[]
tiktokPosts    String[]

// SEO & Meta
metaTitle       String?
metaDescription String?
keywords        String[] // Array of SEO keywords
favicon         String? // URL to favicon
logo            String? // URL to main logo
logoAlt         String? // Alt text for logo

// Feature Toggles
enableRegistration     Boolean @default(true)
enableTeacherProfiles  Boolean @default(true)
enableExercisePackages Boolean @default(true)
enableGames            Boolean @default(true)
enableTestimonials     Boolean @default(true)
enableBlog             Boolean @default(true)
maintenanceMode        Boolean @default(false)

// Content Configuration
welcomeMessage    String? @db.Text
footerText        String? @db.Text
privacyPolicyUrl  String?
termsOfServiceUrl String?
aboutUsContent    String? @db.Text

// Localization
defaultLanguage    Language   @default(ENGLISH)
supportedLanguages Language[]

// Analytics & Tracking
googleAnalyticsId String?
facebookPixelId   String?
hotjarId          String?

// Email Configuration
supportEmailName String? @default("EduGuiders Support")
noReplyEmail     String?
emailSignature   String? @db.Text

// Points & Gamification
pointsPerExercise        Int @default(10)
pointsPerPackageComplete Int @default(100)

// API & Integration
maxApiRequestsPerHour Int     @default(1000)
enablePublicApi       Boolean @default(false)
webhookSecret         String?

// File Upload Limits
maxImageSize      Int      @default(5242880) // 5MB in bytes
maxVideoSize      Int      @default(52428800) // 50MB in bytes
allowedImageTypes String[] @default(["jpg", "jpeg", "png", "gif"])
allowedVideoTypes String[] @default(["mp4", "webm", "mov"])

// Version & Updates
version     String   @default("1.0.0")
lastUpdated DateTime @default(now())
updatedBy   String? // Email of admin who made changes

// Timestamps
createdAt DateTime @default(now())
updatedAt DateTime @updatedAt

@@map("page_config")
}

// Helper model for storing key-value configuration pairs
// for additional flexibility
model ConfigSetting {
id       String @id @default(uuid())
key      String @unique
value    String @db.Text
category String @default("general") // general, theme, features, etc.

description String? // What this setting controls
dataType    String  @default("string") // string, boolean, number, json
isPublic    Boolean @default(false) // Can be accessed by frontend

createdAt DateTime @default(now())
updatedAt DateTime @updatedAt

@@index([category])
@@index([isPublic])
@@map("config_settings")
}