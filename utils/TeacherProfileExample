import React, { useEffect, useState } from 'react';
import { HelmetProvider } from 'react-helmet-async';
import SEO from '../components/SEO';
import { generateSchema, seoHelpers, generateAlternateLanguages } from '../../utils/seo';
// ... other imports
import { useParams, Link } from 'react-router-dom'
// @ts-ignore
import { useAuth } from '@repo/auth';
import {
    useTeacherProfileApi,
    TeacherProfile,
    useDynamicsApi,
    Dynamic,
    usePostApi,
    Post,
    useExerciseApi,
    Exercise
} from '@repo/api-bridge';
import StatisticsOne from '../components/StatisticsOne';
import { toast } from 'sonner';
import '../../assets/css/teacherProfile.css';

// Components
import ProfileHero from '../components/profile/ProfileHero';
import ProfileNavigation from '../components/profile/ProfileNavigation';
import AboutSection from '../components/profile/AboutSection';
import ExperienceSection from '../components/profile/ExperienceSection';
import ResourcesSection from '../components/profile/ResourcesSection';
import ContactSection from '../components/profile/ContactSection';
import EditProfileModal from '../components/profile/EditProfileModal';
import EducationModal from '../components/profile/EducationModal';
import ExperienceModal from '../components/profile/ExperienceModal';
import CertificationModal from '../components/profile/CertificationModal';

// Enhanced color themes with better palettes
const profileThemes = {
    '#A47BB9': {
        name: 'Lavender',
        primary: '#A47BB9',
        secondary: '#8A66A0',
        accent: '#C99FD8',
        bg: '#F8F5FA',
        light: '#E8D8F0',
        dark: '#6B4C7A'
    },
    '#E08D79': {
        name: 'Coral',
        primary: '#E08D79',
        secondary: '#C17063',
        accent: '#F0A593',
        bg: '#FFF8F6',
        light: '#F5D1C8',
        dark: '#B85A42'
    },
    '#5C9EAD': {
        name: 'Teal',
        primary: '#5C9EAD',
        secondary: '#487F8A',
        accent: '#7BB5C3',
        bg: '#F0F7F9',
        light: '#C8E3E9',
        dark: '#3A6B75'
    },
    '#D46BA3': {
        name: 'Pink',
        primary: '#D46BA3',
        secondary: '#B3588C',
        accent: '#E489BC',
        bg: '#FCF5F9',
        light: '#ECC4D6',
        dark: '#A04875'
    },
    '#779ECB': {
        name: 'Blue',
        primary: '#779ECB',
        secondary: '#637EB0',
        accent: '#96B5DC',
        bg: '#F3F7FC',
        light: '#C7D7ED',
        dark: '#4A6B8A'
    },
    '#8B9467': {
        name: 'Sage',
        primary: '#8B9467',
        secondary: '#6B7A4F',
        accent: '#A8B885',
        bg: '#F7F8F5',
        light: '#D1D7C4',
        dark: '#5A6640'
    },
    '#CB8589': {
        name: 'Rose',
        primary: '#CB8589',
        secondary: '#B06E72',
        accent: '#DCA3A7',
        bg: '#FCF7F8',
        light: '#E8D1D3',
        dark: '#9A5A5E'
    },
    '#A0845C': {
        name: 'Bronze',
        primary: '#A0845C',
        secondary: '#8A6F47',
        accent: '#C4A076',
        bg: '#F9F7F4',
        light: '#DDD1C0',
        dark: '#6B5A3A'
    }
};

interface TeacherStats {
    totalExercises: number;
    totalDynamics: number;
    totalPosts: number;
    totalResources: number;
    yearsTeaching: number;
}

const TeacherProfilePage: React.FC = () => {
    const { userId } = useParams<{ userId: string }>();
    const { user } = useAuth();
    const teacherProfileApi = useTeacherProfileApi();
    const dynamicsApi = useDynamicsApi();
    const postApi = usePostApi();
    const exerciseApi = useExerciseApi();

    // State
    const [profile, setProfile] = useState<TeacherProfile | null>(null);
    const [dynamics, setDynamics] = useState<Dynamic[]>([]);
    const [posts, setPosts] = useState<Post[]>([]);
    const [exercises, setExercises] = useState<Exercise[]>([]);
    const [loading, setLoading] = useState(true);
    const [activeTab, setActiveTab] = useState('about');
    const [teacherStats, setTeacherStats] = useState<TeacherStats | null>(null);

    // Modal states
    const [showEditModal, setShowEditModal] = useState(false);
    const [showEducationModal, setShowEducationModal] = useState(false);
    const [showExperienceModal, setShowExperienceModal] = useState(false);
    const [showCertificationModal, setShowCertificationModal] = useState(false);

    const isOwnProfile = user?.id === userId;
    const theme = profile?.themeColor
        ? profileThemes[profile.themeColor as keyof typeof profileThemes] || profileThemes['#A47BB9']
        : profileThemes['#A47BB9'];

    useEffect(() => {
        if (userId) {
            fetchProfile().then();
        }
    }, [userId]);

    const fetchProfile = async () => {
        if (!userId) {
            console.error('No Teacher Profile Provided');
            return;
        }

        try {
            setLoading(true);
            const response = await teacherProfileApi.getTeacherProfile(userId);
            if (response.data) {
                setProfile(response.data);
                await teacherProfileApi.recordProfileView(userId);
                if (response.data.user?.email) {
                    await fetchTeacherContent(response.data.user.email);
                }
            }
        } catch (error) {
            console.error('Error fetching profile:', error);
            toast.error('Failed to load teacher profile');
        } finally {
            setLoading(false);
        }
    };

    const fetchTeacherContent = async (email: string) => {
        try {
            const [dynamicsResponse, postsResponse, exercisesResponse] = await Promise.all([
                dynamicsApi.getDynamicsByEmail(email, { published: true }),
                postApi.getPostByEmail(email),
                exerciseApi.getExercisesByAuthor(email, { isPublished: true })
            ]);

            const fetchedDynamics = Array.isArray(dynamicsResponse.data) ? dynamicsResponse.data : [];
            const fetchedPosts = Array.isArray(postsResponse.data) ? postsResponse.data : [];
            const fetchedExercises = Array.isArray(exercisesResponse.data) ? exercisesResponse.data : [];

            setDynamics(fetchedDynamics);
            setPosts(fetchedPosts);
            setExercises(fetchedExercises);

            // Calculate stats
            const totalResources = fetchedDynamics.length + fetchedPosts.length + fetchedExercises.length;
            const yearsTeaching = profile?.yearsExperience || 0;

            setTeacherStats({
                totalExercises: fetchedExercises.length,
                totalDynamics: fetchedDynamics.length,
                totalPosts: fetchedPosts.length,
                totalResources,
                yearsTeaching
            });
        } catch (error) {
            console.error('Error fetching teacher content:', error);
        }
    };

    const calculateProfileCompleteness = (): number => {
        if (!profile) return 0;

        const fields = [
            'displayName', 'tagline', 'bio', 'profileImage', 'coverImage',
            'yearsExperience', 'nativeLanguage', 'teachingLanguages', 'specializations',
            'teachingStyle', 'phoneNumber'
        ];

        const completedFields = fields.filter(field => {
            const value = profile[field as keyof TeacherProfile];
            return value && (Array.isArray(value) ? value.length > 0 : true);
        });

        return Math.round((completedFields.length / fields.length) * 100);
    };

    const formatCurrency = (amount?: number, currency = 'USD'): string | null => {
        if (!amount) return null;
        const formatter = new Intl.NumberFormat('es-DO', {
            style: 'currency',
            currency: currency === 'DOP' ? 'DOP' : 'USD',
            minimumFractionDigits: 0,
            maximumFractionDigits: 0
        });
        return formatter.format(amount);
    };

    if (!profile) return /* ... not found component */;

    const profileSchema = generateSchema.teacherProfile(profile);
    const breadcrumbSchema = seoHelpers.generateBreadcrumbSchema([
        { name: 'Home', url: seoHelpers.generateCanonical('/') },
        { name: 'Teachers', url: seoHelpers.generateCanonical('/teachers') },
        { name: profile.displayName || profile.user?.name || 'Teacher Profile', url: seoHelpers.generateCanonical(`/teachers/${profile.userId}`) }
    ]);

    const combinedSchema = {
        "@context": "https://schema.org",
        "@graph": [profileSchema, breadcrumbSchema]
    };

    const teacherName = profile.displayName || profile.user?.name || 'Teacher';
    const description = profile.bio || `Professional English teacher ${teacherName} offering personalized language instruction. Specializes in ${profile.specializations?.join(', ') || 'English teaching'}.`;


    // Statistics data for the StatisticsOne component
    const statisticsData = teacherStats ? [
        {
            value: teacherStats.totalExercises,
            symbol: '',
            label: 'Exercises Created',
            icon: 'fas fa-puzzle-piece',
            colorClass: 'bg-main-25'
        },
        {
            value: teacherStats.totalDynamics,
            symbol: '',
            label: 'Teaching Dynamics',
            icon: 'fas fa-lightbulb',
            colorClass: 'bg-main-two-25'
        },
        {
            value: teacherStats.totalPosts,
            symbol: '',
            label: 'Blog Posts',
            icon: 'fas fa-blog',
            colorClass: 'bg-main-25'
        },
        {
            value: teacherStats.totalResources,
            symbol: '',
            label: 'Total Resources',
            icon: 'fas fa-book',
            colorClass: 'bg-main-two-25'
        }
    ] : [];

    if (loading) {
        return (
            <div className="tp-loading">
                <div className="tp-loading-spinner"></div>
                <p>Loading teacher profile...</p>
            </div>
        );
    }

    if (!profile) {
        return (
            <div className="tp-not-found">
                <h2>Teacher Profile Not Found</h2>
                <Link to="/teachers">Browse All Teachers</Link>
            </div>
        );
    }

    return (
        <HelmetProvider>
            <div className="tp-profile-page" style={{
                '--tp-theme': theme.primary,
                '--tp-theme-secondary': theme.secondary,
                '--tp-theme-accent': theme.accent,
                '--tp-theme-bg': theme.bg,
                '--tp-theme-light': theme.light,
                '--tp-theme-dark': theme.dark
            } as React.CSSProperties}>

                <SEO
                    title={`${teacherName} - English Teacher Profile`}
                    description={seoHelpers.generateDescription(description)}
                    keywords={seoHelpers.generateKeywords(
                        teacherName,
                        description,
                        ['english teacher', 'tutor', 'language instructor', ...(profile.specializations || [])]
                    )}
                    canonical={seoHelpers.generateCanonical(`/teachers/${profile.userId}`)}

                    ogTitle={`${teacherName} - Professional English Teacher`}
                    ogDescription={seoHelpers.generateDescription(description)}
                    ogImage={profile.profileImage || profile.user?.picture || seoHelpers.generateOGImage(teacherName, 'teacher')}
                    ogType="profile"

                    twitterCard="summary_large_image"
                    twitterCreator={teacherName ? `@${teacherName.replace(/\s/g, '').toLowerCase()}` : undefined}

                    schema={combinedSchema}
                    alternateLanguages={generateAlternateLanguages(`/teachers/${profile.userId}`)}
                />

                <ProfileHero
                    profile={profile}
                    theme={theme}
                    isOwnProfile={isOwnProfile}
                    profileCompleteness={calculateProfileCompleteness()}
                    formatCurrency={formatCurrency}
                    onEditClick={() => setShowEditModal(true)}
                />

                {/* Teacher Statistics */}
                {teacherStats && statisticsData.length > 0 && (
                    <div className="tp-statistics-section">
                        <StatisticsOne
                            stats={statisticsData}
                            title="Teaching Impact"
                            subtitle="Resources and contributions by this educator"
                        />
                    </div>
                )}

                <ProfileNavigation
                    activeTab={activeTab}
                    onTabChange={setActiveTab}
                />

                <div className="tp-content">
                    {activeTab === 'about' && (
                        <AboutSection profile={profile} />
                    )}

                    {activeTab === 'experience' && (
                        <ExperienceSection
                            profile={profile}
                            isOwnProfile={isOwnProfile}
                            onAddEducation={() => setShowEducationModal(true)}
                            onAddExperience={() => setShowExperienceModal(true)}
                            onAddCertification={() => setShowCertificationModal(true)}
                        />
                    )}

                    {activeTab === 'resources' && (
                        <ResourcesSection
                            posts={posts}
                            dynamics={dynamics}
                            exercises={exercises}
                        />
                    )}

                    {activeTab === 'contact' && (
                        <ContactSection profile={profile} />
                    )}
                </div>

                {/* Modals */}
                {showEditModal && (
                    <EditProfileModal
                        profile={profile}
                        profileThemes={profileThemes}
                        onClose={() => setShowEditModal(false)}
                        onSave={fetchProfile}
                        theme={theme}
                    />
                )}

                {showEducationModal && (
                    <EducationModal
                        teacherId={profile.id} // Use profile.id instead of userId
                        onClose={() => setShowEducationModal(false)}
                        onSave={fetchProfile}
                        theme={theme}
                    />
                )}

                {showExperienceModal && (
                    <ExperienceModal
                        teacherId={profile.id} // Use profile.id instead of userId
                        onClose={() => setShowExperienceModal(false)}
                        onSave={fetchProfile}
                        theme={theme}
                    />
                )}

                {showCertificationModal && (
                    <CertificationModal
                        teacherId={profile.id} // Use profile.id instead of userId
                        onClose={() => setShowCertificationModal(false)}
                        onSave={fetchProfile}
                        theme={theme}
                    />
                )}
            </div>
        </HelmetProvider>
    );
};

export default TeacherProfilePage;